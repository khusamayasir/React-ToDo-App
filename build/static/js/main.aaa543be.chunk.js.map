{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNA6DeA,MA3Df,SAAkBC,GAClB,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MACtD,IADL,mBAAOC,EAAP,KAAcC,EAAd,KAGMC,EAAUC,iBAAO,MAEvBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAgB,SAAAC,GAClBP,EAASO,EAAEC,OAAOV,QAalB,OACI,sBAAMW,UAAU,YAAYC,SAXd,SAAAH,GAClBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACXE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAEVC,EAAS,KAIL,SACKL,EAAME,KACH,qCACA,uBACAoB,KAAK,OACLC,YAAY,mBACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,kBACVW,SAAUd,EACVe,IAAKpB,IAEL,wBAAQQ,UAAU,mBAAlB,uBAGA,qCACA,uBACIQ,KAAK,OACLC,YAAY,aACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,aACVW,SAAUd,EACVe,IAAKpB,IAGL,wBAAQQ,UAAU,cAAlB,4B,eCPLa,MAzCf,YAAgE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WACjD,EAAwB9B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAFX,mBAAOD,EAAP,KAAa8B,EAAb,KAaA,OAAI9B,EAAKe,GACE,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SATZ,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACJf,GAAI,KACJd,MAAO,QAQJyB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBAAKrB,UAAWoB,EAAKE,WAAa,oBAAsB,WAAxD,UAGK,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKjB,KAApD,SACKiB,EAAKb,MADAa,EAAKjB,IAIf,sBAAKH,UAAU,QAAf,UACI,cAAC,IAAD,CACAuB,QAAS,kBAAMP,EAAWI,EAAKjB,KAC/BH,UAAU,gBAEV,cAAC,IAAD,CACAuB,QAAS,kBAAML,EAAQ,CAAEf,GAAIiB,EAAKjB,GAAId,MAAO+B,EAAKb,QAClDP,UAAU,mBAbbqB,OCyBCG,MA9Cf,WACA,MAA0BrC,mBAAS,IAAnC,mBAAO2B,EAAP,KAAcW,EAAd,KAoCI,OACI,gCACI,4DACA,cAAC,EAAD,CAAUxB,SArCN,SAAAmB,GACZ,GAAIA,EAAKb,OAAQ,QAAQmB,KAAKN,EAAKb,MAAnC,CAIA,IAAMoB,EAAQ,CAAIP,GAAJ,mBAAaN,IAE3BW,EAASE,OA+BD,cAAC,EAAD,CAAMb,MAAOA,EAAOC,aAdX,SAAAZ,GACjB,IAAIyB,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHIA,EAAKjB,KAAOA,IACZiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAO+CZ,WApBzC,SAAAb,GACf,IAAM0B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKjB,KAAOA,KAExDsB,EAASI,IAiBuEZ,WA5BjE,SAACc,EAAQC,GACpBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAI3CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAK/B,KAAO4B,EAASC,EAAWE,eCVxDC,MARf,WACE,OACE,qBAAKnC,UAAU,WAAf,SACE,cAAC,EAAD,OCFNoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.aaa543be.chunk.js","sourcesContent":["import React, { useState,useEffect, useRef } from 'react';\r\n\r\nfunction TodoForm(props) {\r\nconst [input, setInput] = useState(props.edit ? props.edit.value\r\n    :'');\r\n\r\nconst inputRef= useRef(null)\r\n\r\nuseEffect(() => {\r\n    inputRef.current.focus()\r\n})\r\n\r\nconst handleChange =  e => {\r\n    setInput(e.target.value);\r\n}\r\n\r\nconst handleSubmit =  e => {\r\n    e.preventDefault();\r\n\r\n    props.onSubmit({\r\n        id: Math.floor(Math.random() * 10000),\r\n        text: input\r\n    });\r\n    setInput('');\r\n};\r\n\r\n    return (\r\n        <form className='todo-form' onSubmit={handleSubmit}>\r\n            {props.edit ? (\r\n                <>\r\n                <input \r\n                type='text' \r\n                placeholder='Update your Task' \r\n                value={input}\r\n                name='text'\r\n                className='todo-input edit'\r\n                onChange={handleChange} \r\n                ref={inputRef}\r\n                />\r\n                <button className='todo-button edit'>Update</button>\r\n                </>):\r\n                (\r\n                <>\r\n                <input \r\n                    type='text' \r\n                    placeholder='Add a todo' \r\n                    value={input}\r\n                    name='text'\r\n                    className='todo-input'\r\n                    onChange={handleChange} \r\n                    ref={inputRef}\r\n                />\r\n        \r\n                    <button className='todo-button'>Add todo</button>\r\n                    </>\r\n                )}\r\n            \r\n        </form> \r\n    )\r\n};\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport {RiCloseCircleLine} from  'react-icons/ri'\r\nimport { TiEdit } from 'react-icons/ti';\r\n\r\nfunction Todo( {todos, completeTodo, removeTodo, updateTodo} ) {\r\nconst [edit, setEdit] = useState({\r\n    id: null,\r\n    value: ''\r\n});\r\n\r\nconst submitUpdate = value => {\r\n    updateTodo(edit.id, value)\r\n    setEdit({\r\n        id: null,\r\n        value: ''\r\n    })\r\n}\r\n\r\nif (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate}/>;\r\n}\r\n\r\n    return todos.map((todo, index) => (\r\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n         key={index}\r\n         >\r\n             <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                 {todo.text}\r\n             </div>\r\n\r\n             <div className='icons'>\r\n                 <RiCloseCircleLine \r\n                 onClick={() => removeTodo(todo.id)}\r\n                 className='delete-icon'/>\r\n\r\n                 <TiEdit \r\n                 onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n                 className='edit-icon'/>\r\n             </div>\r\n\r\n        </div>\r\n\r\n    ));\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList() {\r\nconst [todos, setTodos] = useState([])\r\n\r\nconst addTodo = todo => {\r\n    if(!todo.text || /^\\s*$/.test(todo.text)) {\r\n        return;\r\n    }\r\n\r\n    const newTodos = [todo, ...todos]\r\n\r\n    setTodos(newTodos);\r\n}; \r\n\r\nconst updateTodo = (todoId, newValue) => {\r\n    if(!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n        return;\r\n    }\r\n\r\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n};\r\n\r\nconst removeTodo = id => {\r\n    const removeArr = [...todos].filter(todo => todo.id !== id);\r\n\r\n    setTodos(removeArr);\r\n};\r\n\r\nconst completeTodo = id => {\r\n    let updatedTodos = todos.map(todo => {\r\n        if (todo.id === id){\r\n            todo.isComplete = !todo.isComplete;\r\n        }\r\n        return todo;\r\n    });\r\n    setTodos(updatedTodos);\r\n};\r\n\r\n    return (\r\n        <div>\r\n            <h1>What's the Plan for Today?</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}